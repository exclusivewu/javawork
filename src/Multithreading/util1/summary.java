package Multithreading.util1;

/**
 * @Author: Wuxinwei
 * @Date: 2021/6/17 20:07
 * @Description: 多线程的基本概念
 *
 * 进程和线程的区别：
 *  1，进程是资源分配的单位，线程是调度和执行的单位（cpu分配时间的单位）。
 *  2，进程单独占有一定的内存地址空间，所以进程间存在内存隔离，数据是分开的。
 *  数据共享复制大事同步简单，每个进程之间互不干扰。线程共享所属进程的占有的内存地址空间和
 *  职员，数据共享简单但是同步复杂。
 *  3，因为进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他的进程，可靠性强
 *  一个线程的崩溃可能影响整个程序的稳定性，可靠性较低。
 *  4，进程的销毁和创建不仅仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度。
 *  开销比较大，线程只需要保存寄存器和栈信息，开销比较小。
 *
 *  上下文的切换过程：
 *      指的是cpu从一个进程（或者线程） 切换到另外一个进程（或线程），上下文是指某一个时间点
 *      cpu寄存器和程序计数器的内容。
 *
 *      寄存器：cpu中运算速度很快的闪存，通常存储和访问计算过程中的中间值提升程序的运算速度。
 *
 *      程序计数器：是一个专用的寄存器，用来表明指令序列中cpu正在执行的位置，存的值为正在执行
 *      的指令的位置，或者下一个将要被执行的指令的位置，
 *
 *      举例子： 线程a->b
 *      先挂起a 把a的cpu状态保存在内存中，
 *      在内存中找到下一个线程b的上下文，将其在cpu寄存器中恢复，执行b。
 *      当B执⾏完，根据程序计数器中指向的位置恢复线程A。
 *      任务宠保存到再次被加载，就是一次上下文的切换。
 *      上下文的切换也不是越多越好的。
 *
 *
 *
 *
 *
 *
 */
public class summary {
}
